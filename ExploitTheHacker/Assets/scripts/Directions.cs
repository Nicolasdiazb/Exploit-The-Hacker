using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using System.Linq;

public class Left : IDirectionState
{
    Juan juan;
    List<PathPoint> points;
    NavMeshAgent agent;
    float destination;
    followPlayer currCam;
    Vector3 destinationPoint;
    int moving;
    public void Init(Juan _juan, List<PathPoint> _points, NavMeshAgent _agent, followPlayer cam, Vector3 target)
    {
        juan = _juan;
        points = _points;
        agent = _agent;
        currCam = cam;
        Debug.Log("estopasHP");
        //points.ForEach(p =>
        //{
        //    Debug.Log(p.position);
        //});
        moving = 1;
        juan.GetComponentInChildren<Animator>().SetBool("Moving", true);
        //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Play();
    }

    public void Process()
    {
        destination = juan.currPoint().position.x;
        List<PathPoint> currPoints;
        //currPoints = points.Where(p => p.position == new Vector2(destination-1, juan.currPoint().position.y)).Where(p => p.hasLeftExit).ToList();
        currPoints = points.Where(p => p.position == new Vector2(destination - moving, juan.currPoint().position.y)).Where(d => !juan.currPoint().blackList.Exists(e => d)).ToList();
        currPoints.RemoveAll(c => juan.currPoint().blackList.ToList().Exists(n => n == c));
        destinationPoint = (currPoints.Count() > 0) ? currPoints.ToArray()[0].transform.position : new Vector3(juan.point.position.x, juan.point.position.y, 0);
        currCam.OnPlayerMoving(juan.gameObject);
        //Debug.Log(juan.currPoint().position.x + " " + juan.currPoint().position.y);
        //Debug.Log((points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y)).ToArray()[0]).transform.name);
        agent.SetDestination(destinationPoint);
        //if(points.Any(p => p.position == new Vector2(6.0f, 0.0f)))
        //{
        //}
        //points.ForEach(e =>
        //{
        //    Debug.Log(e.position);
        ////});
        //points.Where(p => p.position.y == juan.currPoint().position.y).Min(p=> p.position.x)
        //IEnumerable<PathPoint> dest = points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y));
        //Debug.Log(dest.ToArray()[0]);
    }
    public void OnPointReached(PathPoint pointReached)
    {
        Debug.Log("esto pasa");
        if (pointReached.hasLeftExit == false)
        {
            moving = 0;
            juan.GetComponentInChildren<Animator>().SetBool("Moving", false);
            //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Stop();
        }
        juan.point = pointReached;
    }

}
public class Right : IDirectionState
{
    Juan juan;
    List<PathPoint> points;
    NavMeshAgent agent;
    float destination;
    followPlayer currCam;
    Vector3 destinationPoint;
    int moving;
    bool onBlackList;
    public void Init(Juan _juan, List<PathPoint> _points, NavMeshAgent _agent, followPlayer cam, Vector3 target)
    {
        juan = _juan;
        points = _points;
        agent = _agent;
        currCam = cam;
        //points.ForEach(p =>
        //{
        //    Debug.Log(p.position);
        //});
        moving = 1;
        juan.GetComponentInChildren<Animator>().SetBool("Moving", true);
        //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Play();
    }

    public void Process()
    {
        destination = juan.currPoint().position.x;
        List<PathPoint> currPoints;
        //currPoints = points.Where(p => p.position == new Vector2(destination-1, juan.currPoint().position.y)).Where(p => p.hasLeftExit).ToList();
        currPoints = points.Where(p => p.position == new Vector2(destination + moving, juan.currPoint().position.y)).ToList().Where(d => !juan.currPoint().blackList.Exists(e => d)).ToList();
        currPoints.RemoveAll(c => juan.currPoint().blackList.ToList().Exists(n => n == c));
        destinationPoint = (currPoints.Count() > 0) ? currPoints.ToArray()[0].transform.position : new Vector3(juan.point.position.x, juan.point.position.y, 0);
        currCam.OnPlayerMoving(juan.gameObject);
        //Debug.Log(juan.currPoint().position.x + " " + juan.currPoint().position.y);
        //Debug.Log((points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y)).ToArray()[0]).transform.name);
        agent.SetDestination(destinationPoint);
        //if(points.Any(p => p.position == new Vector2(6.0f, 0.0f)))
        //{
        //}
        //points.ForEach(e =>
        //{
        //    Debug.Log(e.position);
        ////});
        //points.Where(p => p.position.y == juan.currPoint().position.y).Min(p=> p.position.x)
        //IEnumerable<PathPoint> dest = points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y));
        //Debug.Log(dest.ToArray()[0]);
    }
    public void OnPointReached(PathPoint pointReached)
    {
        if (pointReached.hasRightExit == false)
        {
            moving = 0;
            juan.GetComponentInChildren<Animator>().SetBool("Moving", false);
            //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Stop();
        }
        juan.point = pointReached;
    }

}
public class Up : IDirectionState
{
    Juan juan;
    List<PathPoint> points;
    NavMeshAgent agent;
    float destination;
    followPlayer currCam;
    Vector3 destinationPoint;
    int moving;
    bool onBlackList;
    public void Init(Juan _juan, List<PathPoint> _points, NavMeshAgent _agent, followPlayer cam, Vector3 target)
    {
        juan = _juan;
        points = _points;
        agent = _agent;
        currCam = cam;
        //points.ForEach(p =>
        //{
        //    Debug.Log(p.position);
        //});
        moving = 1;
        juan.GetComponentInChildren<Animator>().SetBool("Moving", true);
        //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Play();
    }

    public void Process()
    {
        destination = juan.currPoint().position.y;
        List<PathPoint> currPoints;
        //currPoints = points.Where(p => p.position == new Vector2(destination-1, juan.currPoint().position.y)).Where(p => p.hasLeftExit).ToList();
        currPoints = points.Where(p => p.position == new Vector2(juan.currPoint().position.x, destination + moving)).ToList();
        //PathPoint[] intersected = currPoints.Intersect(juan.currPoint().blackList).ToArray();
        //PathPoint[] inCommon = (intersected.Length>0)? intersected
        //currPoints.Remove(currPoints.Intersect(juan.currPoint().blackList).ToArray());
        currPoints.RemoveAll(c => juan.currPoint().blackList.ToList().Exists(n => n == c));
        destinationPoint = (currPoints.Count() > 0) ? currPoints.ToArray()[0].transform.position : new Vector3(juan.point.position.x, juan.point.position.y, 0);
        currCam.OnPlayerMoving(juan.gameObject);
        //Debug.Log(juan.currPoint().position.x + " " + juan.currPoint().position.y);
        //Debug.Log((points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y)).ToArray()[0]).transform.name);
        agent.SetDestination(destinationPoint);
        //if(points.Any(p => p.position == new Vector2(6.0f, 0.0f)))
        //{
        //}
        //points.ForEach(e =>
        //{
        //    Debug.Log(e.position);
        ////});
        //points.Where(p => p.position.y == juan.currPoint().position.y).Min(p=> p.position.x)
        //IEnumerable<PathPoint> dest = points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y));
        //Debug.Log(dest.ToArray()[0]);
    }
    public void OnPointReached(PathPoint pointReached)
    {
        if (pointReached.hasUpExit == false)
        {
            moving = 0;
            juan.GetComponentInChildren<Animator>().SetBool("Moving", false);
            //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Stop();
        }
        juan.point = pointReached;
    }

}
public class Down : IDirectionState
{
    Juan juan;
    List<PathPoint> points;
    NavMeshAgent agent;
    float destination;
    followPlayer currCam;
    Vector3 destinationPoint;
    int moving;
    public void Init(Juan _juan, List<PathPoint> _points, NavMeshAgent _agent, followPlayer cam, Vector3 target)
    {
        juan = _juan;
        points = _points;
        agent = _agent;
        currCam = cam;
        //points.ForEach(p =>
        //{
        //    Debug.Log(p.position);
        //});
        moving = 1;
        juan.GetComponentInChildren<Animator>().SetBool("Moving", true);
        //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Play();
    }

    public void Process()
    {
        destination = juan.currPoint().position.y;
        List<PathPoint> currPoints;
        //currPoints = points.Where(p => p.position == new Vector2(destination-1, juan.currPoint().position.y)).Where(p => p.hasLeftExit).ToList();
        currPoints = points.Where(p => p.position == new Vector2(juan.currPoint().position.x, destination - moving)).ToList().Where(d => !juan.currPoint().blackList.Exists(e => d)).ToList();
        currPoints.RemoveAll(c => juan.currPoint().blackList.ToList().Exists(n => n == c));
        destinationPoint = (currPoints.Count() > 0) ? currPoints.ToArray()[0].transform.position : new Vector3(juan.point.position.x, juan.point.position.y, 0);
        currCam.OnPlayerMoving(juan.gameObject);
        //Debug.Log(juan.currPoint().position.x + " " + juan.currPoint().position.y);
        //Debug.Log((points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y)).ToArray()[0]).transform.name);
        agent.SetDestination(destinationPoint);
        //if(points.Any(p => p.position == new Vector2(6.0f, 0.0f)))
        //{
        //}
        //points.ForEach(e =>
        //{
        //    Debug.Log(e.position);
        ////});
        //points.Where(p => p.position.y == juan.currPoint().position.y).Min(p=> p.position.x)
        //IEnumerable<PathPoint> dest = points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y));
        //Debug.Log(dest.ToArray()[0]);
    }
    public void OnPointReached(PathPoint pointReached)
    {
        if (pointReached.hasDownExit == false)
        {
            moving = 0;
            juan.GetComponentInChildren<Animator>().SetBool("Moving", false);
            //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Stop();
        }
        juan.point = pointReached;
    }

}
public class Directionated : IDirectionState
{
    Juan juan;
    List<PathPoint> points;
    NavMeshAgent agent;
    float destination;
    followPlayer currCam;
    Vector3 destinationPoint;
    int moving;
    bool onBlackList;
    public void Init(Juan _juan, List<PathPoint> _points, NavMeshAgent _agent, followPlayer cam, Vector3 target)
    {
        juan = _juan;
        currCam = cam;
        agent = _agent;
        destinationPoint = target;
        juan.GetComponentInChildren<Animator>().SetBool("Moving", true);
        //juan.GetComponentInChildren<WalkDust>().gameObject.GetComponent<ParticleSystem>().Play();
    }

    public void Process()
    {
        agent.isStopped = false;
        currCam.OnPlayerMoving(juan.gameObject);
        agent.SetDestination(destinationPoint);
        //if(points.Any(p => p.position == new Vector2(6.0f, 0.0f)))
        //{
        //}
        //points.ForEach(e =>
        //{
        //    Debug.Log(e.position);
        ////});
        //points.Where(p => p.position.y == juan.currPoint().position.y).Min(p=> p.position.x)
        //IEnumerable<PathPoint> dest = points.Where(p => p.position == new Vector2(juan.currPoint().position.x - 1, juan.currPoint().position.y));
        //Debug.Log(dest.ToArray()[0]);
    }
    public void OnPointReached(PathPoint pointReached)
    {

    }

}
